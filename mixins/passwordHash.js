'use strict'

const _ = require('lodash')

/**
 * Generate a salted hash of a specified password string - Similar to PHPs
 * password_hash function, which returns a string with the hash AND the salt,
 * making it easier to store in a database, and easier to verify
 *
 * @name        module:_.passwordHash
 * @function    module:_.passwordHash
 * @memberof    module:_
 * @param       {string}    password        Password to hash
 * @returns     {string}    109 character password hash (salt is first 20 characters)
 * @note        Every password hash is generated by using a salt value that is randomly generated every time, this means 
 *              that the resulting hash will be different every time it executes, even if the passwords are the same
 * @example 
 *  const pwd1 = _.passwordHash('SomePass')
 *  // => LIE9OKy0g$eNB <cut> XFMcfx78L5SuZZivA==
 *  const pwd2 = _.passwordHash('SomePass')
 *  pwd1 === pwd2
 *  // => false
 */
function passwordHash ( password ) {
    if( ! password ){
        throw new Error('No password was given to hash')
    }

    if( ! _.isString( password ) ){
        throw new Error('Must provide a STRING as a password')
    }

    // Generate the salt
    // THIS MUST NOT CHANGE! If this value is not the same as what
    // passwordVerify expects, no hash will be validated
    const salt = randStr( 20 )

    // Return the salted hash with the salt prepended to it
    return salt + makeHash( password, salt )
}

_.mixin({
    passwordHash: passwordHash
})

module.exports = passwordHash